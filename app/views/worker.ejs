<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BioMark - Работники</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
        }
        
        .main-container {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 15px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        
        .header-inner {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        .logo {
            font-size: 2rem;
            font-weight: 700;
            color: #667eea;
            text-decoration: none;
            display: flex;
            align-items: center;
            transition: all 0.3s ease;
        }
        
        .logo:hover {
            color: #764ba2;
            transform: scale(1.05);
        }
        
        .logo i {
            margin-right: 10px;
            font-size: 2.2rem;
        }
        
        .nav-menu {
            display: flex;
            gap: 30px;
            align-items: center;
        }
        
        .nav-link {
            color: #667eea;
            text-decoration: none;
            font-weight: 600;
            padding: 10px 20px;
            border-radius: 25px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .nav-link:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }
        
        .nav-link.logout {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            color: white;
        }
        
        .nav-link.logout:hover {
            background: linear-gradient(135deg, #c82333 0%, #e55a00 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(220, 53, 69, 0.3);
        }
        
        /* Content */
        .content {
            flex: 1;
            padding: 40px 20px;
        }
        
        .workers-container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .page-title {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            font-size: 2.5rem;
            font-weight: 700;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        
        .workers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .worker-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
            text-align: center;
            animation: slideUp 0.6s ease-out;
        }
        
        .worker-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 30px 60px rgba(0, 0, 0, 0.2);
        }
        
        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .worker-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            font-size: 2.5rem;
            color: white;
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            overflow: hidden;
            position: relative;
        }
        
        .worker-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%;
        }
        
        .worker-avatar .avatar-icon {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 2.5rem;
            color: white;
        }
        
        .photo-upload-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 10px;
            cursor: pointer;
        }
        
        .photo-upload-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }
        
        .photo-delete-btn {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-top: 5px;
            cursor: pointer;
        }
        
        .photo-delete-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }
        
        .file-input {
            display: none;
        }
        
        .worker-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .worker-role {
            color: #666;
            font-size: 1.1rem;
            margin-bottom: 20px;
        }
        
        .view-details-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .view-details-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
            color: white;
        }
        
        /* Modal Styles */
        .modal-content {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            border: none;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }
        
        .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 20px 20px 0 0;
            border: none;
            padding: 20px 30px;
        }
        
        .modal-title {
            font-size: 1.5rem;
            font-weight: 700;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .modal-body {
            padding: 30px;
        }
        
        .info-item {
            background: rgba(102, 126, 234, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 15px;
            border-left: 4px solid #667eea;
            transition: all 0.3s ease;
        }
        
        .info-item:hover {
            background: rgba(102, 126, 234, 0.15);
            transform: translateX(5px);
        }
        
        .info-label {
            font-weight: 600;
            color: #667eea;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .info-value {
            font-size: 1.1rem;
            color: #333;
            margin: 0;
        }
        
        .btn-close {
            filter: invert(1);
            opacity: 0.8;
        }
        
        .btn-close:hover {
            opacity: 1;
        }
        
        /* No workers state */
        .no-workers {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 60px 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            text-align: center;
            grid-column: 1 / -1;
            animation: slideUp 0.6s ease-out;
        }
        
        .no-workers .worker-avatar {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            margin-bottom: 20px;
        }
        
        .no-workers .worker-name {
            color: #dc3545;
            margin-bottom: 10px;
        }
        
        .no-workers .worker-role {
            color: #666;
            font-size: 1.1rem;
        }
        
        /* Dropdown */
        .dropdown {
            z-index: 9999;
        }
        
        .dropdown-menu {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }
        
        .dropdown-item {
            color: #6c757d;
            transition: all 0.3s ease;
        }
        
        .dropdown-item:hover {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .header-inner {
                flex-direction: column;
                gap: 15px;
            }
            
            .nav-menu {
                flex-wrap: wrap;
                justify-content: center;
                gap: 15px;
            }
            
            .page-title {
                font-size: 2rem;
            }
            
            .workers-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .worker-card {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- Header -->
        <header class="header">
            <div class="header-inner">
                <a href="/main" class="logo">
                    <i class="fas fa-heartbeat"></i>
                    BioMark
                </a>
                <nav class="nav-menu">
                    <a href="/worker" class="nav-link active">
                        <i class="fas fa-users me-1"></i>Работники
                    </a>
                    <a href="/card" class="nav-link">
                        <i class="fas fa-id-card me-1"></i>Пациенты
                    </a>
                    <a href="/sensors" class="nav-link">
                        <i class="fas fa-microchip me-1"></i>Датчики
                    </a>
                    <a href="/logout" class="nav-link logout">
                        <i class="fas fa-sign-out-alt me-1"></i>Выйти
                    </a>
                </nav>
                
                <div class="dropdown">
                    <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                        <i class="fas fa-cog me-1"></i>Действия
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <button class="dropdown-item" data-bs-toggle="modal" data-bs-target="#addWorkerModal">
                                <i class="fas fa-plus me-2"></i>Добавить работника
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" onclick="refreshWorkers()">
                                <i class="fas fa-sync-alt me-2"></i>Обновить данные
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </header>

        <!-- Content -->
        <main class="content">
            <div class="workers-container">
                <h1 class="page-title">
                    <i class="fas fa-users me-3"></i>
                    Медицинский персонал
                </h1>
                
                <div class="workers-grid" id="workersContainer">
                    <!-- Работники будут загружены через Socket.io -->
                    <div class="empty-state">
                        <i class="fas fa-users-slash"></i>
                        <h3>Нет данных о работниках</h3>
                        <p>Работники не найдены в базе данных</p>
                    </div>
                </div>
            </div>
        </main>


    </div>

    <!-- Модальные окна будут создаваться динамически -->

    <!-- Add Worker Modal -->
    <div class="modal fade" id="addWorkerModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-user-plus me-2"></i>Добавить работника
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="addWorkerForm">
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="workerUsername" name="username" placeholder="Имя пользователя" required>
                                    <label for="workerUsername">
                                        <i class="fas fa-user me-2"></i>Имя пользователя
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="password" class="form-control" id="workerPassword" name="password" placeholder="Пароль" required>
                                    <label for="workerPassword">
                                        <i class="fas fa-lock me-2"></i>Пароль
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="workerFIO" name="FIO" placeholder="ФИО" required>
                                    <label for="workerFIO">
                                        <i class="fas fa-id-card me-2"></i>ФИО
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input type="text" class="form-control" id="workerRang" name="Rang" placeholder="Должность" required>
                                    <label for="workerRang">
                                        <i class="fas fa-briefcase me-2"></i>Должность
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-1"></i>Отмена
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>Добавить
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Socket.io подключение
        const socket = io('/worker');
        
        // Кэш для хранения предыдущих данных
        let previousWorkersData = null;
        
        // Функция для сравнения данных
        const hasDataChanged = (newData, oldData) => {
            if (!oldData) return true;
            return JSON.stringify(newData) !== JSON.stringify(oldData);
        };
        
        // Обработка данных работников
        socket.on('workersData', function (data) {
            updateWorkersDisplay(data.workers);
        });
        
        // Функция обновления отображения работников
        function updateWorkersDisplay(workers) {
            const container = document.getElementById('workersContainer');
            
            if (!workers || workers.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-users-slash"></i>
                        <h3>Нет данных о работниках</h3>
                        <p>Работники не найдены в базе данных</p>
                    </div>
                `;
                return;
            }
            
            let workersHTML = '';
            
            workers.forEach((user, index) => {
                workersHTML += `
                    <div class="worker-card" data-user-id="${user._id}" data-index="${index}">
                        <div class="worker-avatar" data-bs-toggle="modal" data-bs-target="#workerModal${index}">
                            ${user.photo && user.photo !== '/uploads/default-avatar.png' 
                                ? `<img src="${user.photo}" alt="${user.FIO || 'Пользователь'}" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                   <div class="avatar-icon" style="display: none;">
                                       ${getUserIcon(user.Rang)}
                                   </div>`
                                : `<div class="avatar-icon">
                                       ${getUserIcon(user.Rang)}
                                   </div>`
                            }
                        </div>
                        <h3 class="worker-name">
                            ${user.FIO || 'Не указано'}
                        </h3>
                        <p class="worker-role">
                            ${user.Rang || 'Должность не указана'}
                        </p>
                        <button class="view-details-btn" data-bs-toggle="modal" data-bs-target="#workerModal${index}">
                            <i class="fas fa-eye"></i>
                            Подробнее
                        </button>
                        
                        <!-- Кнопки управления фото -->
                        <div class="photo-controls">
                            <input type="file" class="file-input" id="photoInput${index}" accept="image/*" data-user-id="${user._id}">
                            <button class="photo-upload-btn" onclick="document.getElementById('photoInput${index}').click()">
                                <i class="fas fa-camera"></i> Загрузить фото
                            </button>
                            ${user.photo && user.photo !== '/uploads/default-avatar.png' 
                                ? `<button class="photo-delete-btn" onclick="deletePhoto('${user._id}', '${index}')">
                                       <i class="fas fa-trash"></i> Удалить фото
                                   </button>`
                                : ''
                            }
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = workersHTML;
            
            // Анимация появления карточек
            const cards = document.querySelectorAll('.worker-card');
            cards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.2}s`;
            });
            
            // Обработка загрузки фото
            const fileInputs = document.querySelectorAll('.file-input');
            fileInputs.forEach(input => {
                input.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    if (file) {
                        uploadPhoto(this.dataset.userId, file);
                    }
                });
            });
            
            // Создаем модальные окна
            createWorkerModals(workers);
        }
        
        // Функция для получения иконки пользователя
        function getUserIcon(rang) {
            if (rang && rang.toLowerCase().includes('врач')) {
                return '<i class="fas fa-user-md"></i>';
            } else if (rang && rang.toLowerCase().includes('медсестра')) {
                return '<i class="fas fa-user-nurse"></i>';
            } else if (rang && rang.toLowerCase().includes('админ')) {
                return '<i class="fas fa-user-shield"></i>';
            } else {
                return '<i class="fas fa-user"></i>';
            }
        }
        
        // Функция создания модальных окон
        function createWorkerModals(workers) {
            // Удаляем старые модальные окна
            const oldModals = document.querySelectorAll('[id^="workerModal"]');
            oldModals.forEach(modal => modal.remove());
            
            workers.forEach((user, index) => {
                const modalHTML = `
                    <div class="modal fade" id="workerModal${index}" tabindex="-1" aria-labelledby="workerModal${index}Label" aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="workerModal${index}Label">
                                        ${getUserIcon(user.Rang)}
                                        ${user.FIO || 'Не указано'}
                                    </h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="info-item">
                                        <div class="info-label">
                                            <i class="fas fa-user"></i>
                                            Имя пользователя
                                        </div>
                                        <p class="info-value">${user.username || 'Не указано'}</p>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">
                                            <i class="fas fa-id-card"></i>
                                            ФИО
                                        </div>
                                        <p class="info-value">${user.FIO || 'Не указано'}</p>
                                    </div>
                                    <div class="info-item">
                                        <div class="info-label">
                                            <i class="fas fa-briefcase"></i>
                                            Должность
                                        </div>
                                        <p class="info-value">${user.Rang || 'Должность не указана'}</p>
                                    </div>
                                    ${user.createdAt ? `
                                        <div class="info-item">
                                            <div class="info-label">
                                                <i class="fas fa-calendar-alt"></i>
                                                Дата регистрации
                                            </div>
                                            <p class="info-value">${new Date(user.createdAt).toLocaleDateString('ru-RU')}</p>
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                document.body.insertAdjacentHTML('beforeend', modalHTML);
            });
        }
        
        // Функция загрузки фото
        async function uploadPhoto(userId, file) {
            const formData = new FormData();
            formData.append('photo', file);
            
            try {
                const response = await fetch(`/upload-photo/${userId}`, {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Обновляем изображение на странице
                    const avatar = document.querySelector(`[data-user-id="${userId}"]`).closest('.worker-card').querySelector('.worker-avatar');
                    const img = avatar.querySelector('img');
                    const icon = avatar.querySelector('.avatar-icon');
                    
                    if (img) {
                        img.src = result.photo + '?t=' + Date.now(); // Добавляем timestamp для обновления кэша
                    } else {
                        // Создаем новое изображение
                        const newImg = document.createElement('img');
                        newImg.src = result.photo;
                        newImg.alt = 'Фото пользователя';
                        newImg.onerror = function() {
                            this.style.display = 'none';
                            icon.style.display = 'flex';
                        };
                        avatar.insertBefore(newImg, icon);
                        icon.style.display = 'none';
                    }
                    
                    // Показываем кнопку удаления
                    const card = document.querySelector(`[data-user-id="${userId}"]`).closest('.worker-card');
                    const deleteBtn = card.querySelector('.photo-delete-btn');
                    if (!deleteBtn) {
                        const controls = card.querySelector('.photo-controls');
                        const newDeleteBtn = document.createElement('button');
                        newDeleteBtn.className = 'photo-delete-btn';
                        newDeleteBtn.innerHTML = '<i class="fas fa-trash"></i> Удалить фото';
                        newDeleteBtn.onclick = () => deletePhoto(userId, card.dataset.index);
                        controls.appendChild(newDeleteBtn);
                    }
                    
                    alert('Фото успешно загружено!');
                } else {
                    alert('Ошибка загрузки фото: ' + result.error);
                }
            } catch (error) {
                console.error('Ошибка загрузки фото:', error);
                alert('Ошибка загрузки фото');
            }
        }
        
        // Функция удаления фото
        async function deletePhoto(userId, index) {
            if (!confirm('Вы уверены, что хотите удалить фото?')) {
                return;
            }
            
            try {
                const response = await fetch(`/delete-photo/${userId}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Обновляем аватар
                    const card = document.querySelector(`[data-user-id="${userId}"]`).closest('.worker-card');
                    const avatar = card.querySelector('.worker-avatar');
                    const img = avatar.querySelector('img');
                    const icon = avatar.querySelector('.avatar-icon');
                    
                    if (img) {
                        img.remove();
                    }
                    icon.style.display = 'flex';
                    
                    // Удаляем кнопку удаления
                    const deleteBtn = card.querySelector('.photo-delete-btn');
                    if (deleteBtn) {
                        deleteBtn.remove();
                    }
                    
                    alert('Фото успешно удалено!');
                } else {
                    alert('Ошибка удаления фото: ' + result.error);
                }
            } catch (error) {
                console.error('Ошибка удаления фото:', error);
                alert('Ошибка удаления фото');
            }
        }
        
        // Функция обновления данных работников
        function refreshWorkers() {
            // Принудительно запрашиваем обновление данных
            socket.emit('requestWorkersData');
            alert('Данные работников обновлены');
        }
        
        // Обработчик для кнопки добавления работника
        document.addEventListener('DOMContentLoaded', function() {
            const addWorkerBtn = document.querySelector('[data-bs-target="#addWorkerModal"]');
            if (addWorkerBtn) {
                addWorkerBtn.addEventListener('click', function() {
                    // Показываем модальное окно для добавления работника
                    const modal = new bootstrap.Modal(document.getElementById('addWorkerModal'));
                    modal.show();
                });
            }
            
            // Обработчик формы добавления работника
            const addWorkerForm = document.getElementById('addWorkerForm');
            if (addWorkerForm) {
                addWorkerForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(this);
                    const workerData = {
                        username: formData.get('username'),
                        password: formData.get('password'),
                        FIO: formData.get('FIO'),
                        Rang: formData.get('Rang')
                    };
                    
                    try {
                        const response = await fetch('/register', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'
                            },
                            body: new URLSearchParams(workerData)
                        });
                        
                        if (response.redirected) {
                            alert('Работник успешно добавлен!');
                            // Закрываем модальное окно
                            const modal = bootstrap.Modal.getInstance(document.getElementById('addWorkerModal'));
                            modal.hide();
                            // Очищаем форму
                            this.reset();
                            // Обновляем данные
                            socket.emit('requestWorkersData');
                        } else {
                            const result = await response.text();
                            alert('Ошибка добавления работника: ' + result);
                        }
                    } catch (error) {
                        console.error('Ошибка добавления работника:', error);
                        alert('Ошибка добавления работника');
                    }
                });
            }
        });
    </script>
</body>
</html>
